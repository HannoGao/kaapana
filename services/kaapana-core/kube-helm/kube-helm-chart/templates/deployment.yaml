---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kube-helm-deployment
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app-name: kube-helm
  template:
    metadata:
      labels:
        app-name: kube-helm
    spec:
      initContainers:
        - name: copy-kube-helm-helpers
          image: "{{  .Values.global.registry_url }}/kube-helm-helpers:0.1.0"
          imagePullPolicy: {{ .Values.global.pull_policy_pods }}
          env:
          - name: ACTION
            value: copy
          - name: CHARTS_DIR
            value: charts/helpers
          volumeMounts:
          - name: helmextensions
            mountPath: /charts
{{- range $collection := .Values.global.kaapana_collections }}
        - name: copy-{{ $collection.name }}
          image: "{{ .Values.global.registry_url }}/{{ $collection.name }}:{{ $collection.version }}"
          imagePullPolicy: {{ .Values.global.pull_policy_pods }}
          env:
          - name: ACTION
            value: copy
          - name: CHARTS_DIR
            value: charts/collections
          volumeMounts:
          - name: helmextensions
            mountPath: /charts
{{- end }}
      containers:
      - name: kube-helm
        image: {{  .Values.global.registry_url }}/kube-helm:0.1.2
        imagePullPolicy:  {{ .Values.global.pull_policy_pods }}
        resources:
          limits:
            memory: "1Gi"
          requests:
            memory: "100Mi"
        env: # Environment variables
        - name: SECRET_KEY
          value: kaapana-secret
        - name: APPLICATION_ROOT
          value: "/kube-helm-api"
        - name: HELM_PATH
          value: "/usr/local/bin/helm"
        - name: REGISTRY_URL
          value: {{  .Values.global.registry_url }}
        - name: OFFLINE_MODE
          value: '{{  .Values.global.offline_mode }}'
        - name: BASE_NAMESPACE
          value: {{  .Values.global.base_namespace }}
        - name: FLOW_NAMESPACE
          value: {{  .Values.global.flow_namespace }}
        - name: FLOW_JOBS_NAMESPACE
          value: {{  .Values.global.flow_jobs_namespace }}
        - name: PULL_POLICY_PODS
          value: {{  .Values.global.pull_policy_pods }}
        - name: PULL_POLICY_JOBS
          value: {{  .Values.global.pull_policy_jobs }}
        - name: FAST_DATA_DIR
          value: {{  .Values.global.fast_data_dir }}
        - name: SLOW_DATA_DIR
          value: {{  .Values.global.slow_data_dir }}
{{- if .Values.global.http_proxy }}
        - name: PROXY
          value: {{ .Values.global.http_proxy }}
{{- end }}
        - name: MINIO_ACCESS_KEY
          value: {{ .Values.global.credentials_minio_username }}
        - name: MINIO_SECRET_KEY
          value: {{ .Values.global.credentials_minio_password }}
        - name: INSTANCE_NAME
          value: {{  .Values.global.instance_name }}
        - name: HOSTNAME
          value: {{  .Values.global.hostname }}
        - name: HTTPS_PORT
          value: "{{  .Values.global.https_port }}"
        ports: # Port(s) on which your application runs
          - containerPort: 5000
        volumeMounts:
          - name: helmextensions
            mountPath: "/root/charts"
          - name: helmconfig
            mountPath: "/root/.config/helm"
          - name: helmcache
            mountPath: "/root/.cache/helm"
          - name: helmlocal
            mountPath: "/root/.local/share/helm"
      volumes:
      - name: helmextensions
        hostPath:
          path: {{ .Values.global.fast_data_dir }}/charts
          type: DirectoryOrCreate
      - name: helmconfig
        hostPath:
          path: {{ .Values.global.home_dir }}/.config/helm
          type: DirectoryOrCreate
      - name: helmcache
        hostPath:
          path: {{ .Values.global.home_dir }}/.cache/helm
          type: DirectoryOrCreate
      - name: helmlocal
        hostPath:
          path: {{ .Values.global.home_dir }}/.local/share/helm
          type: DirectoryOrCreate
      imagePullSecrets:
      - name: registry-secret
---