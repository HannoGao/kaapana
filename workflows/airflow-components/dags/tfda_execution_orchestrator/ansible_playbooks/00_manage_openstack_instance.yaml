---
- name: Create/delete a compute instance
  hosts: localhost
  gather_facts: false

  vars:
    ssh_key: "{{ os_ssh_key | default('tfda_iso') }}"
    os_auth_url: "{{ os_auth_url | default('https://cloud.dkfz-heidelberg.de:13000') }}"
    project_name: "{{ os_project_name | default('E230-Kaapana') }}"
    os_project_id: "{{ os_proj_id | default('969831bf53424f1fb318a9c1d98e1941') }}"
    username: "{{ os_username }}"
    password: "{{ os_password }}"
    instance_name: "{{ os_instance_name | default('test-isolated-environment') }}"
    volume_size: "{{ os_volume_size | default('150') }}"
    os: "{{ os_image | default('Ubuntu-20.04-LTS-DKFZ') }}"
    instance_flavor: "{{ os_instance_flavor | default('dkfz-8.16') }}"
    instance_state: "{{ instance_state | default('present') }}"

  environment:
    OS_IDENTITY_API_VERSION: 2
    OS_ENDPOINT_TYPE: publicURL

  tasks:
    - name: Check if all required variables are passed using --extra-vars
      fail:
        msg: "variable {{ item }} not defined"
      when: item is not defined
      with_items:
        - "{{ os_username }}"
        - "{{ os_password }}"

    - name: check if instance exists
      environment: 
        OS_TENANT_ID: "{{ os_project_id }}"
      openstack.cloud.server_info:
        auth:
          auth_url: "{{ os_auth_url }}"
          username: "{{ os_username }}"
          password: "{{ os_password }}"
          user_domain_name: "AD"
          project_name: "{{ os_project_name }}"
        server: "{{ os_instance_name }}"
        api_timeout: 120
      register: inst_info

    - name: if instance not found
      debug: 
        msg: "Instance does NOT already exist!"
      when: inst_info.openstack_servers | length == 0
      
    - name: Set custom Instance Image
      set_fact:
        instance_image: "{{ os }}"

    - fail: msg="{{ project_name }} this project is not supported! [E230 E230-DKTK-JIP E230-Kaapana-CI E230-DCIPHER-CI E130-OP41 E230-Production]"
      when: 
      - project_name != "E230"
      - project_name != "E230-Kaapana"
      - project_name != "E230-Kaapana-CI"
      - project_name != "E230-TFDA"
    
    - name: Set network ID for project E230 to avoid conflict, because E230 has 2 network items
      set_fact: 
        network_id: "6ca0c141-3a54-4439-8ae6-45eafb93b0fa"
      when: project_name == "E230"

    - name: Set network ID for project E230-TFDA to avoid conflict, because E230 has 2 network items
      set_fact: 
        network_id: "1ebc9079-e20e-4a3b-9eec-1054808c8382"
      when: project_name == "E230-TFDA"
    
    - name: Create instance if not already present
      block:
      - name: check ssh_key_file present
        stat: 
          path: "~/.ssh/{{ ssh_key }}.pem"
        register: ssh_key_file

      - name: check ssh_key_file
        fail: msg="The ssh-key ~/.ssh/{{ ssh_key }}.pem must be present on the host!"
        when: not ssh_key_file.stat.exists

      - name: launch an instance
        environment:
          OS_TENANT_ID: "{{ os_project_id }}"
        os_server:
          state: "{{ instance_state }}"
          auth:
            auth_url: "{{ os_auth_url }}"
            username: "{{ username }}"
            password: "{{ password }}"
            user_domain_name: "AD"
            project_name: "{{ project_name }}"
          network: "{{ network_id | default('') }}"
          name: "{{ instance_name }}"
          image: "{{ instance_image }}"
          volume_size: "{{ volume_size }}"
          flavor: "{{ instance_flavor }}"
          key_name: "{{ ssh_key }}"
          region_name: regionOne
          boot_from_volume: True
          terminate_volume: True
          security_groups: default
          delete_fip: yes
          # auto_ip: yes
          reuse_ips: yes
          wait: yes
          timeout: 120
          # floating_ips:
          #   - 10.133.26.2
          floating_ip_pools:
            - external-DKFZ-net
          meta:
            hostname: new_instance.localdomain
        register: new_instance
      
      - name: Reset fingerprint
        command: ssh-keygen -R {{ new_instance.openstack.accessIPv4 }}
        ignore_errors: yes

      - name: Wait for SSH on the Instance
        command: "ssh -oBatchMode=yes -oStrictHostKeyChecking=no -i ~/.ssh/{{ ssh_key }}.pem root@{{ new_instance.openstack.accessIPv4 }} true"
        register: result
        until: result.rc == 0
        retries: 6
        delay: 10

      - name: RESULT
        debug:
          msg: "OPENSTACK INSTANCE CREATED SUCCESSFULLY"

      - name: RETURN
        debug:
          msg: "isolated_env_ip: {{ new_instance.openstack.accessIPv4 }}"
      
      when: (inst_info.openstack_servers | length == 0) and "{{ instance_state }}" == "present"

    - name: delete an instance if found
      block:
      - name: delete an instance  
        environment: 
          OS_TENANT_ID: "{{ os_project_id }}"
        os_server:
          state: "{{ instance_state }}"
          auth:
            auth_url: "{{ os_auth_url }}"
            username: "{{ os_username }}"
            password: "{{ os_password }}"
            user_domain_name: "AD"
            project_name: "{{ os_project_name }}"
          name: "{{ os_instance_name }}"
          terminate_volume: True
          # delete_fip: True
          timeout: 120
        register: del_instance

      - name: RESULT
        debug:
          msg: "INSTANCE DELETED SUCCESSFULLY"

      when: (inst_info.openstack_servers | length > 0) and "{{ instance_state }}" == "absent"
